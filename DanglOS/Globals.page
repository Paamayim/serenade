~~~ { .c }
typedef struct {
    enum msg_type_t type;
    char ctrl;
    int dest, src;

    msg_envelope_t *next;
    uint32_t tick;

    enum mem_type_t memory_type;
    size_t len;
} msg_header_t;
~~~

~~~ { .c }
#define MAX_MESSAGE_LENGTH (MMU_BLOCK_SIZE - sizeof(msg_header_t))
typedef struct message_envelope {
    msg_header_t header;
    char data[MAX_MESSAGE_LENGTH];
} msg_envelope_t;
~~~

~~~ { .c }
#define MMU_MEMORY_START ((char*)&
    mmu_blockdesc_t *next;
} mmu_blockdesc_t;
~~~

~~~ { .c }
typedef struct {
    char bitVector[(MMU_MAX_MEMORY_SIZE / MMU_BLOCK_SIZE) / 8];
    mmu_blockdesc_t *block;
} mmu_memtable_t;
~~


~~~ { .c }
typedef struct pcb {
    uint32_t *stackptr;
    uint32_t pid;
    proc_state_t state;
    priority_t priority;
    msg_envelope_t *msg_head, *msg_tail;
} pcb_t;
~~~