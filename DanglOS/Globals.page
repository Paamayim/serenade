# Globals Information

~~~ { .c }
typedef struct {
    enum msg_type_t type;
    char ctrl;
    int dest, src;

    msg_envelope_t *next;
    uint32_t tick;

    enum mem_type_t memory_type;
    size_t len;
} msg_header_t;
~~~

The $msg_header_t$ describes the entire metadata of a message, including routing information, payload size, and state of memory-managedness. It is separate from the $msg_envelope_t$ type as an implementation detail to ensure that a message is exactly the same length as a memory block. The fields of $msg_header_t$ are used as follows:

- ~~~ { .c } enum msg_type_t type ~~~ does this work?



~~~ { .c }
#define MAX_MESSAGE_LENGTH (MMU_BLOCK_SIZE - sizeof(msg_header_t))
typedef struct {
    msg_header_t header;
    char data[MAX_MESSAGE_LENGTH];
} msg_envelope_t;
~~~

Describe message envelopes.

~~~ { .c }
#define MMU_MEMORY_SIZE ((char*)MMU_MAX_MEMORY_ADDR - MMU_MEMORY_START)
#define MMU_MAX_MEMORY_SIZE 0x4000

#define MMU_BLOCK_SIZE 512
#define MMU_NUM_BLOCKS (MMU_MEMORY_SIZE / MMU_BLOCK_SIZE)

typedef struct {
    char *start, *end;
    mmu_blockdesc_t *next;
} mmu_blockdesc_t;
~~~

Describe block desriptor

~~~ { .c }
typedef struct {
    char bitVector[(MMU_MAX_MEMORY_SIZE / MMU_BLOCK_SIZE) / 8];
    mmu_blockdesc_t *block;
} mmu_memtable_t;
~~~

Describe memtable.

~~~ { .c }
typedef struct pcb {
    uint32_t *stackptr;
    uint32_t pid;
    proc_state_t state;
    priority_t priority;
    msg_envelope_t *msg_head, *msg_tail;
} pcb_t;
~~~

Describe pcb.